// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package queries

import (
	"context"
)

const listProductVariants = `-- name: ListProductVariants :many
select id, parent_id, title, sku, slug, description, base_price, main_picture, inserted_at, updated_at from products
where parent_id is not null
order by parent_id, id
`

func (q *Queries) ListProductVariants(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProductVariants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.Title,
			&i.Sku,
			&i.Slug,
			&i.Description,
			&i.BasePrice,
			&i.MainPicture,
			&i.InsertedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
select id, parent_id, title, sku, slug, description, base_price, main_picture, inserted_at, updated_at from products order by inserted_at DESC
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.Title,
			&i.Sku,
			&i.Slug,
			&i.Description,
			&i.BasePrice,
			&i.MainPicture,
			&i.InsertedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
