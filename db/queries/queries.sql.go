// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package queries

import (
	"context"
)

const listProductVariants = `-- name: ListProductVariants :many
select pv.id, pv.product_id, pv.sku, pv.title, pv.description, pv.inserted_at, pv.updated_at, p.id, p.title, p.sku, p.slug, p.description, p.inserted_at, p.updated_at from product_variants pv
join products p on pv.product_id = p.id
order by pv.inserted_at desc
`

type ListProductVariantsRow struct {
	ProductVariant ProductVariant
	Product        Product
}

func (q *Queries) ListProductVariants(ctx context.Context) ([]ListProductVariantsRow, error) {
	rows, err := q.db.Query(ctx, listProductVariants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductVariantsRow
	for rows.Next() {
		var i ListProductVariantsRow
		if err := rows.Scan(
			&i.ProductVariant.ID,
			&i.ProductVariant.ProductID,
			&i.ProductVariant.Sku,
			&i.ProductVariant.Title,
			&i.ProductVariant.Description,
			&i.ProductVariant.InsertedAt,
			&i.ProductVariant.UpdatedAt,
			&i.Product.ID,
			&i.Product.Title,
			&i.Product.Sku,
			&i.Product.Slug,
			&i.Product.Description,
			&i.Product.InsertedAt,
			&i.Product.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
select id, title, sku, slug, description, inserted_at, updated_at from products order by inserted_at DESC
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Sku,
			&i.Slug,
			&i.Description,
			&i.InsertedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
